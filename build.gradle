plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

version = "1.19.2-${verspec}.${verbuild}"
group = "me.towdium.jecharacters"
archivesBaseName = "jecharacters"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    mavenCentral()
    maven { url 'https://dvs1.progwml6.com/files/maven/' }
    maven { url 'https://jitpack.io' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

minecraft {
    mappings channel: 'official', version: '1.19.2'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jecharacters'
            mods {
                jecharacters {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jecharacters'
            mods {
                jecharacters {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jecharacters'

            mods {
                jecharacters {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'jecharacters', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                jecharacters {
                    source sourceSets.main
                }
            }
        }
    }
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.57'
    compileOnly fg.deobf('mezz.jei:jei-1.19.2-forge:11.5.0.297')
    runtimeOnly fg.deobf('mezz.jei:jei-1.19.2-forge:11.5.0.297')
    shade(group: 'com.github.towdium', name: 'pinin', version: "${verpinin}") {
        transitive = false
    }
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : 'Just Enough Characters',
                "Specification-Vendor"    : 'Towdium',
                "Specification-Version"   : "${verspec}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${verspec}.${verbuild}",
                "Implementation-Vendor"   : 'Towdium',
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            include 'me/towdium/pinin/**'
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

task generate(type: Exec) {
    commandLine 'python', 'generate.py'
}

compileJava.dependsOn generate

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': version
    }
    into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
    finalizedBy replaceResources
}
