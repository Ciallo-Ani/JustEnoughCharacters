import java.nio.file.Files

task generate {
    new ClassGenerator().generate()
}

class ClassGenerator {

    private static final String MIXIN_JSON_PATTERN =
            "{\n" +
            "  \"required\": false,\n" +
            "  \"minVersion\": \"0.8\",\n" +
            "  \"package\": \"me.towdium.jecharacters.mixins\",\n" +
            "  \"compatibilityLevel\": \"JAVA_17\",\n" +
            "  \"client\": [\n" +
            "    MixinClasses\n" +
            "  ]\n" +
            "}"


    private static final String MIXIN_SUFFIX_CLASS_PATTERN =
            "package me.towdium.jecharacters.mixins;\n" +
                    "\n" +
                    "import me.towdium.jecharacters.utils.Match;\n" +
                    "import net.minecraft.client.searchtree.SuffixArray;\n" +
                    "import org.spongepowered.asm.mixin.Mixin;\n" +
                    "import org.spongepowered.asm.mixin.Pseudo;\n" +
                    "import org.spongepowered.asm.mixin.injection.At;\n" +
                    "import org.spongepowered.asm.mixin.injection.Redirect;\n" +
                    "\n" +
                    "\n" +
                    "@SuppressWarnings({\"UnresolvedMixinReference\",\"mapping\"})\n" +
                    "@Pseudo\n" +
                    "@Mixin(targets = \"targetClass\", remap = isRemap)\n" +
                    "public class ClassName {\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"NEW\", target = \"net/minecraft/client/searchtree/SuffixArray\", remap = isRemap))\n" +
                    "    private staticFlag SuffixArray redirectConstructor() {\n" +
                    "        return new Match.FakeArray();\n" +
                    "    }\n" +
                    "\n" +
                    "}"

    private static final String MIXIN_CONTAINS_CLASS_PATTERN =
            "package me.towdium.jecharacters.mixins;\n" +
                    "\n" +
                    "import me.towdium.jecharacters.utils.Match;\n" +
                    "import org.spongepowered.asm.mixin.Mixin;\n" +
                    "import org.spongepowered.asm.mixin.Pseudo;\n" +
                    "import org.spongepowered.asm.mixin.injection.At;\n" +
                    "import org.spongepowered.asm.mixin.injection.Redirect;\n" +
                    "\n" +
                    "\n" +
                    "@SuppressWarnings({\"UnresolvedMixinReference\",\"mapping\"})\n" +
                    "@Pseudo\n" +
                    "@Mixin(targets = \"targetClass\", remap = isRemap)\n" +
                    "public class ClassName {\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"INVOKE\", target = \"Ljava/lang/String;contains(Ljava/lang/CharSequence;)Z\", remap = isRemap))\n" +
                    "    private staticFlag boolean redirectContains(String haystack, CharSequence needle) {\n" +
                    "        return Match.contains(haystack, needle);\n" +
                    "    }\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"INVOKE\", target = \"Lkotlin/text/StringsKt;contains(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Z)Z\", remap = isRemap))\n" +
                    "    private staticFlag boolean redirectContainsKt1(CharSequence haystack, CharSequence needle) {\n" +
                    "        return Match.contains(haystack, needle);\n" +
                    "    }\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"INVOKE\", target = \"Lkotlin/text/StringsKt;contains(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z\", remap = isRemap))\n" +
                    "    private staticFlag boolean redirectContainsKt2(CharSequence haystack, CharSequence needle) {\n" +
                    "        return Match.contains(haystack, needle);\n" +
                    "    }\n" +
                    "\n" +
                    "}"

    private static final String MIXIN_EQUALS_CLASS_PATTERN =
            "package me.towdium.jecharacters.mixins;\n" +
                    "\n" +
                    "import me.towdium.jecharacters.utils.Match;\n" +
                    "import org.spongepowered.asm.mixin.Mixin;\n" +
                    "import org.spongepowered.asm.mixin.Pseudo;\n" +
                    "import org.spongepowered.asm.mixin.injection.At;\n" +
                    "import org.spongepowered.asm.mixin.injection.Redirect;\n" +
                    "\n" +
                    "\n" +
                    "@SuppressWarnings({\"UnresolvedMixinReference\",\"mapping\"})\n" +
                    "@Pseudo\n" +
                    "@Mixin(targets = \"targetClass\", remap = isRemap)\n" +
                    "public class ClassName {\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"INVOKE\", target = \"Ljava/lang/String;equals(Ljava/lang/Object;)Z\", remap = isRemap))\n" +
                    "    private staticFlag boolean redirectEquals(String string, Object object) {\n" +
                    "        return Match.equals(string, object);\n" +
                    "    }\n" +
                    "\n" +
                    "}"

    private static final String MIXIN_REGEXP_CLASS_PATTERN =
            "package me.towdium.jecharacters.mixins;\n" +
                    "\n" +
                    "import me.towdium.jecharacters.utils.Match;\n" +
                    "import org.spongepowered.asm.mixin.Mixin;\n" +
                    "import org.spongepowered.asm.mixin.Pseudo;\n" +
                    "import org.spongepowered.asm.mixin.injection.At;\n" +
                    "import org.spongepowered.asm.mixin.injection.Redirect;\n" +
                    "\n" +
                    "import java.util.regex.Matcher;\n" +
                    "import java.util.regex.Pattern;\n" +
                    "\n" +
                    "\n" +
                    "@SuppressWarnings({\"UnresolvedMixinReference\",\"mapping\"})\n" +
                    "@Pseudo\n" +
                    "@Mixin(targets = \"targetClass\", remap = isRemap)\n" +
                    "public class ClassName {\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"INVOKE\", target = \"Ljava/util/regex/Pattern;matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\", remap = isRemap))\n" +
                    "    private staticFlag Matcher redirectRegx(Pattern pattern, CharSequence sequence) {\n" +
                    "        return Match.matcher(pattern, sequence);\n" +
                    "    }\n" +
                    "\n" +
                    "    @Redirect(method = \"targetMethod\", at = @At(value = \"INVOKE\", target = \"Ljava/lang/String;matches(Ljava/lang/String;)Z\", remap = isRemap))\n" +
                    "    private staticFlag boolean redirectRegx(String s1, String s2) {\n" +
                    "        return Match.matches(s1, s2);\n" +
                    "    }\n" +
                    "\n" +
                    "}"


    private final String[] manual = new String[]{
            'manual.MixinJeiSearch'
    }

    private final Map<String, Boolean> suffix = new HashMap<>()

    private final Map<String, Boolean> contains = new HashMap()

    private final Map<String, Boolean> equals = new HashMap<>()

    private final Map<String, Boolean> regExp = new HashMap<>()

    private final List<String> mixinClasses = new ArrayList<>()


    ClassGenerator(){

        //suffix
        suffix.put('net.minecraft.client.searchtree.ReloadableIdSearchTree:refresh()V', false)  // Vanilla
        suffix.put('net.minecraft.client.searchtree.ReloadableSearchTree:refresh()V', false)  // Vanilla

        //contains
        contains.put('com.blamejared.controlling.client.NewKeyBindsScreen:lambda$filterKeys$8(Lcom/blamejared/controlling/client/NewKeyBindsList$KeyEntry;)Z', false)  // Controlling
        contains.put('com.blamejared.controlling.client.NewKeyBindsScreen:lambda$filterKeys$9(Lcom/blamejared/controlling/client/NewKeyBindsList$KeyEntry;)Z', false)  // Controlling
        contains.put('com.blamejared.controlling.client.NewKeyBindsScreen:lambda$filterKeys$8(Lcom/blamejared/controlling/client/NewKeyBindsList$KeyEntry;)Z', false)  // Controlling
        contains.put('com.blamejared.controlling.client.NewKeyBindsScreen:filterKeys()V', false,) // Controlling
        contains.put('de.ellpeck.actuallyadditions.mod.booklet.entry.BookletEntry:getChaptersForDisplay(Ljava/lang/String;)Ljava/util/List;', false)  // Actually Additions
        contains.put('appeng.client.gui.me.interfaceterminal.InterfaceTerminalScreen:refreshList()V', false)  // Applied Energistics
        contains.put('appeng.client.gui.me.interfaceterminal.InterfaceTerminalScreen:itemStackMatchesSearchTerm(Lnet/minecraft/class_1799;Ljava/lang/String;)Z', false)  // Applied Energistics
        contains.put('me.towdium.jecalculation.utils.Utilities$I18n:contains(Ljava/lang/String;Ljava/lang/String;)Z', false)  // Just Enough Calculation
        contains.put('vazkii.patchouli.client.book.BookEntry:isFoundByQuery(Ljava/lang/String;)Z', false)  // Patchouli (Botania)
        contains.put('vazkii.botania.api.corporea.CorporeaRequestDefaultMatchers$CorporeaStringMatcher:equalOrContain(Ljava/lang/String;)Z', false)  // Botania (Corporea)
        contains.put('net.blay09.mods.cookingforblockheads.container.RecipeBookContainer:search(Ljava/lang/String;)V', false)  // Cooking for Blockheads
        contains.put('net.blay09.mods.farmingforblockheads.container.MarketClientContainer:applyFilters()V', false)  // Farming for Blockheads
        contains.put('moze_intel.projecte.gameObjs.container.inventory.TransmutationInventory:doesItemMatchFilter(Lmoze_intel/projecte/api/ItemInfo;)Z', false)  // Project E
        contains.put('com.mia.props.client.container.GuiDecobench:refreshButtons()V', false)  // Decofraft workbench
        contains.put('net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen:m_98630_()V', false)  // Vanilla
        contains.put('net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen:m_98619_(Ljava/lang/String;)V', false)  // Vanilla
        contains.put('com.chaosthedude.naturescompass.gui.NaturesCompassScreen:processSearchTerm()V', false)  //Nature"s Compass
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.TagArgumentType:matches(Lorg/apache/commons/lang3/mutable/Mutable;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false)  // REI legacy
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.IdentifierArgumentType:matches(Lorg/apache/commons/lang3/mutable/Mutable;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false)  // REI legacy
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.ModArgumentType:matches(Lorg/apache/commons/lang3/mutable/Mutable;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false)  // REI legacy
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.TooltipArgumentType:matches(Lorg/apache/commons/lang3/mutable/Mutable;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false)  // REI legacy
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.TextArgumentType:matches(Lorg/apache/commons/lang3/mutable/Mutable;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false)  // REI legacy
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.IdentifierArgumentType:matches(Ljava/lang/String;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false) // REI
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.ModArgumentType:matches(Lme/shedaniel/rei/impl/client/search/argument/type/ModArgumentType$ModInfoPair;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false) // REI
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.TagArgumentType:matches([Ljava/lang/String;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false) // REI
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.TextArgumentType:matches(Ljava/lang/String;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false) // REI
        contains.put('me.shedaniel.rei.impl.client.search.argument.type.TooltipArgumentType:matches(Ljava/lang/String;Lme/shedaniel/rei/api/common/entry/EntryStack;Ljava/lang/String;Lnet/minecraft/util/Unit;)Z', false) // REI
        contains.put('me.shedaniel.clothconfig2.forge.gui.entries.DropdownBoxEntry$DefaultDropdownMenuElement:search()V', false)  // Cloth Config
        contains.put('me.shedaniel.clothconfig2.gui.entries.DropdownBoxEntry$DefaultDropdownMenuElement:search()V', false)  // Cloth Config
        contains.put('mezz.jei.search.ElementSearchLowMem:matches(Ljava/lang/String;Lmezz/jei/core/search/PrefixInfo;Lmezz/jei/ingredients/IListElementInfo;)Z', false)  // JEI (low memory)
        contains.put('com.github.klikli_dev.occultism.client.gui.storage.StorageControllerGuiBase:itemMatchesSearch(Lnet/minecraft/world/item/ItemStack;)Z', false) // Occultism
        contains.put('com.github.klikli_dev.occultism.client.gui.storage.StorageControllerGuiBase:machineMatchesSearch(Lcom/github/klikli_dev/occultism/api/common/data/MachineReference;)Z', false) // Occultism
        contains.put('dev.emi.emi.search.NameQuery:matches(Ldev/emi/emi/api/stack/EmiStack;)Z', false) //EMI text search
        contains.put('dev.emi.emi.search.TooltipQuery:matches(Ldev/emi/emi/api/stack/EmiStack;)Z', false) //EMI text search
        contains.put('red.jackf.chesttracker.gui.widgets.WItemListPanel:lambda$updateFilter$0(Lnet/minecraft/class_1799;)Z', false) // Chest Tracker
        contains.put('fi.dy.masa.malilib.gui.widgets.WidgetListBase:matchesFilter(Ljava/lang/String;Ljava/lang/String;)Z', false) // MaLiLib

        //equals
        equals.put('vazkii.botania.api.corporea.CorporeaRequestDefaultMatchers$CorporeaStringMatcher:equalOrContain(Ljava/lang/String;)Z', false)  // Botania (Corporea)

        //Regexp
        regExp.put('appeng.client.gui.me.fluids.FluidRepo:matchesSearch(Lappeng/client/gui/me/common/Repo$SearchMode;Ljava/util/regex/Pattern;Lappeng/api/storage/data/IAEFluidStack;)Z', false)  // Applied Energistics
        regExp.put('appeng.client.gui.me.items.ItemRepo:matchesSearch(Lappeng/client/gui/me/common/Repo$SearchMode;Ljava/util/regex/Pattern;Lappeng/api/storage/data/IAEItemStack;)Z', false)  // Applied Energistics
        regExp.put('com.tom.storagemod.gui.GuiStorageTerminalBase:updateSearch()V', false) // Toms Storage
        regExp.put('appeng.client.gui.me.search.SearchPredicates:lambda$createNamePredicate$2(Ljava/util/regex/Pattern;Lappeng/menu/me/common/GridInventoryEntry;)Z', true) //new Applied Energistics Terminals
        regExp.put('appeng.client.gui.me.search.SearchPredicates:lambda$createTooltipPredicate$3(Lappeng/client/gui/me/search/RepoSearch;Ljava/util/regex/Pattern;Lappeng/menu/me/common/GridInventoryEntry;)Z', true) //new Applied Energistics Terminals
        regExp.put('dev.emi.emi.search.RegexNameQuery:matches(Ldev/emi/emi/api/stack/EmiStack;)Z', false) //EMI regex search
        regExp.put('dev.emi.emi.search.RegexTooltipQuery:matches(Ldev/emi/emi/api/stack/EmiStack;)Z', false) //EMI regex search

    }

    void generate() {

        cleanOldClasses()

        generateClasses(MIXIN_SUFFIX_CLASS_PATTERN, "_SuffixMixin", suffix)
        generateClasses(MIXIN_CONTAINS_CLASS_PATTERN, "_ContainsMixin", contains)
        generateClasses(MIXIN_EQUALS_CLASS_PATTERN, "_EqualsMixin", equals)
        generateClasses(MIXIN_REGEXP_CLASS_PATTERN, "_RegexMixin", regExp)

        mixinClasses.addAll(manual)

        StringBuilder classes = new StringBuilder()
        for (String mixinClass : mixinClasses) {
            classes.append("\"")
                    .append(mixinClass)
                    .append("\"")
                    .append(",")
                    .append("\n")
                    .append("    ")
        }
        classes.delete(classes.length() - 6, classes.length())
        String jsonString = MIXIN_JSON_PATTERN.replace("MixinClasses", classes)
        try {
            File jsonFile = new File("src/main/resources/jecharacters.mixins.json")

            try (FileWriter writer = new FileWriter(jsonFile)) {
                writer.write(jsonString)
            } catch (IOException ignored) {
                println("Can't write to File : " + jsonFile.getPath())
            }
        } catch (FileNotFoundException ignored) {
            println("Can't find mixin config file!")
        }

    }


    private void cleanOldClasses() {
        File mixinsDir = new File("src/main/java/me/towdium/jecharacters/mixins")
        for (File file : mixinsDir.listFiles()){
            if (file.getName().startsWith('_')){
                if (!file.delete()){
                    println("Can't remove generated class : " + file.getName())
                }
            }
        }
    }

    private void generateClasses(String pattern, String basedName, Map<String,Boolean> methods) {
        int index = 0
        for (Map.Entry<String, Boolean> methodEntry : methods.entrySet()) {
            String[] decode = decodeMethod(methodEntry.getKey())
            if (decode.length == 2) {
                String className = basedName + index
                boolean isRemap = methodEntry.getKey().contains("net.minecraft")
                File classFile = new File("src/main/java/me/towdium/jecharacters/mixins/" + className + ".java")
                String targetMethod = decode[1]
                String realClassCode = pattern.replace("targetClass", decode[0])
                        .replace("targetMethod", targetMethod)
                        .replace("ClassName", className)
                        .replace("isRemap", Boolean.toString(isRemap))
                        .replace("staticFlag", methodEntry.getValue() ? "static" : "")
                try (FileWriter writer = new FileWriter(classFile)) {
                    writer.write(realClassCode)
                    mixinClasses.add(className)
                    index++
                } catch (IOException ignored) {
                    println("Can't write File : " + classFile.getPath())
                }
            } else {
                println("Invalid config syntax: " + methodEntry.getKey())
            }
        }

    }

    static String[] decodeMethod(String method) {
        return method.split(":")
    }

}